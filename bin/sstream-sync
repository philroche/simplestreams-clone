#!/usr/bin/python
#
# client showing use of command_hook_mirror

from simplestreams import mirrors
from simplestreams.mirrors import command_hook

import argparse
import logging
import sys
import os

LOG = logging.getLogger('sstream-sync')
LOG.setLevel(logging.ERROR)
LOG.addHandler(logging.StreamHandler())

def which(program):
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, _fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None


def main():
    parser = argparse.ArgumentParser()

    hooks = [("--hook-%s" % hook.replace("_", "-"), hook, False)
             for hook in command_hook.HOOK_NAMES]
    hooks.append(('--hook', command_hook.DEFAULT_HOOK_NAME, True,))
    
    parser.add_argument('--config', '-c',
                        help='read config file',
                        type=argparse.FileType('rb'))

    for (argname, cfgname, required) in hooks:
        parser.add_argument(argname, dest=cfgname, required=required)

    parser.add_argument('--keep', action='store_true', default=False,
                        help='keep items in target up to MAX items '
                             'even after they have fallen out of the source')
    parser.add_argument('--max', type=int, default=None,
                        help='store at most MAX items in the target')
    parser.add_argument('--item-skip-download', action='store_true',
                        default=False,
                        help='Do not download items that are to be inserted.')

    parser.add_argument('mirror_ref')
    parser.add_argument('path', nargs='?', default="streams/v1/index.sjs")
    args = parser.parse_args()

    cfg = {}
    for (argname, cfgname, required) in hooks:
        val = getattr(args, cfgname)
        if not val:
            continue
        if which(val) is None:
            msg = "invalid input for %s. '%s' is not executable\n"
            sys.stderr.write(msg % (argname, val))
            sys.exit(1)
            
        cfg[cfgname] = val

    cfg['item_skip_download'] = args.item_skip_download
    cfg['max_items'] = args.max
    cfg['keep_items'] = args.keep

    smirror = mirrors.UrlMirrorReader(args.mirror_ref)
    tmirror = command_hook.CommandHookMirror(config=cfg)
    tmirror.sync(smirror.reader, args.path)

if __name__ == '__main__':
    main()
