== Simple Sync Format ==
Simple Sync format consists of 2 different file formats.
 * content stream: A collection of multiple item groups of the same "type".
   this is 'stream:1.0' format.
 * stream collection: a list of content streams
   A stream collection is simply a way to provide an index of known content
   streams, and information about them.
   This is 'stream-collection:1.0'

Useful definitions
 * item group
   an item group is a list of like items. Ie, all produced by the same build.
   requirements:
    * serial: a 'serial' entry that can be sorted by YYYYMMDD[.X]
    * items: a list of items

   Example item groups are:
    * output of the amd64 cloud image build done on 2012-04-04
    * amd64 images from the cirros release version 0.3.1

 * item
   There are 1 or more items in a item group.
   requirements:
    * name: must be unique within the item group.

   special fields:
    * path: If an item has a 'path', then the target must be obtainable and
      should be downloaded when mirroring.
    * md5sum: stores checksum

   Example:
    * "disk1.img" produced from the amd64 cloud image build done on 2012-04-04
    * -root.tar.gz produced from the same build.

== Stream ==
format: stream:1.0
examples:  doc/example/amd64.yaml doc/example/i386.yaml

Requirements:
 * must have an 'iqn' entry at top level that uniquely identifies this stream.

Notes:
 * if an item has a 'path' element, that indicates there is a file
   to be downloaded at the 'path' location.
   path is required to be relative to the mirror root.
 * in the event of a 404 or ENOENT on a PATH, the client will consult the 
   'mirrors' entry in the MIRROR.info file, and try to resolve the file
   from *that* mirror.
 * In order to be trusted, Stream files must be signed or transferred
   securely (ie, https).

== Stream Collection ==
format: stream-collection:1.0

A stream collection is really just a simple list or index of streams and
attributes about them.  This is intended to be the entry point into a mirror.

Notes:
 * stream collection files are not required to be signed, as they only
   contain references to other content that is signed, and that is hosted
   on the same mirror.

== Mirror ==
Requirements:
 * top level MIRROR.info file
   That file is required to define an 'iqn', that indicates what it is
   a mirror of, and should contain a 'authoritative_url' indicating
   the upstream mirror for that.
   iqn is used so a client can easily maintain a list of mirrors not
   by 'authoritative_url' but by iqn.
   iqn cannot contain /.
 * streams/v1/streams.sjs or streams/v1/streams.js must be present.
   .sjs is "signed json", and must contain inline GPG signature
   , and should contain a comprehensive
   list of streams in this mirror, suitable for a full mirror.

Optional:
 * v1/streams.js v1/streams.js.gpg
   Contains same content as v1/streams
 * A mirror is required to have a MIRROR.info file at its top level.

== GPG Signatures / Security ==
For secure transmission, inline signed json (.sjs) files are preferred.  Also
acceptable are json files with detached signatures (ie, '.js' and '.js.gpg'
file pairs).

Over secured transports, clients may accept non signed data entiresly (just
.js).

