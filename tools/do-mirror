#!/usr/bin/python
#
# Example of syncing/mirroring:
#
# rm -Rf exdata/images.fake
# make exdata/images.fake
# rm -Rf my-data # optional, it should reasonably resume
# PYTHONPATH=$PWD ./tools/do-mirror ./doc/example/unsigned/images.yaml my-data

from simplestreams import util
from simplestreams import objectstores
from simplestreams import stream
from simplestreams import collection
import toolutil

import errno
import os
import sys
import urllib2
import urlparse


def main():
    src = sys.argv[1]
    target_d = sys.argv[2]

    norm_url = toolutil.normalize_url(src)
    (src_url, path) = toolutil.tokenize_url(norm_url)

    smirror = objectstores.UrlMirrorReader(src_url)

    (content, _sig) = util.read_possibly_signed(path,
                                                smirror.reader)
    data = util.load_content(content)

    tstore = objectstores.FileStore(target_d)
    tmirror = objectstores.MirrorStoreWriter(tstore)

    resolve_args = {'max': None, 'keep': None}

    fmt = data.get("format")
    if fmt == "stream-1.0":
        print "%s/%s (%s)" % (src_url, path, fmt)
        sstream = stream.Stream(data)
        util.sync_stream(src_stream=sstream,
                         src_mirror=smirror, target_stream=None,
                         target_mirror=tmirror, path=path,
                         resolve_args=resolve_args) 
                
    elif fmt == "stream-collection:1.0":
        scoll = collection.Collection(data)
        print "%s/%s (%s) [%s]" % (src_url, path, fmt, scoll.iqn)
        util.sync_collection(src_collection=scoll, src_mirror=smirror,
                             target_mirror=tmirror, path=path,
                             resolve_args=resolve_args)
    
    else:
        print "Unknown format '%s' in '%s'" % (fmt, src_url)
        sys.exit(1)

if __name__ == '__main__':
    main()

# vi: ts=4 expandtab syntax=python
