#!/usr/bin/python

import argparse
import copy
import errno
from Cheetah.Template import Template
import json
import os
import os.path
import StringIO
import subprocess
import sys
import yaml

CONTENT_EXT = ".yaml"
#CONTENT_EXT = ".json"

KNOWN_HASHES = {
    10485860: 'c23ea79b857b91a7ff07c6ecf185f1ca',
    10485960: '184cf91ae405aeabad4c49012f190494',
    10486060: '07d250277f50c93c1e8dd14a156e7c06',
}

DATA_IN = {
 "streams": ["release", "daily"],
 "releases": [
   {"name": "hardy", "version": "8.04"},
   {"name": "lucid", "version": "10.04"},
   {"name": "oneiric", "version": "11.10"},
   {"name": "precise", "version": "12.04"},
   {"name": "quantal", "version": "12.10"},
   {"name": "raring", "version": "13.04"},
 ],
 "serials": [
   "20121208",
   "20121209.1",
   "20121210",
 ],
 "arches": ["amd64", "i386", "armhf"],
 "flabels": ["-disk1.img", ".tar.gz", "-root.tar.gz"],
}

STREAM_TEMPLATE = """
# required
format: stream-1.0
# recommended
description: Ubuntu Cloud Images

item_groups:
#for $serial in $serials
 - serial: $serial
   items:
   #for flabel in $flabels
    #set name = "ubuntu-" + $release.name + "-" + $release.version + "-" + $arch + "-server-" + $serial + $flabel
    #set file = $utils.create_file($outd + "/" + $serial + "/" + $name)
    - name: $name
      url: $serial/$name
      md5sum: $file.md5sum
   #end for
#end for

tags:
 release: ${release["name"]}
 version: "${release["version"]}"
 stream: $stream
 arch: $arch

# maybe required
valid-util: Thu, 29 Nov 2012 22:14:13 +0000
"""

PGP_SIGNED_MESSAGE_HEADER = "-----BEGIN PGP SIGNED MESSAGE-----"
PGP_SIGNATURE_HEADER = "-----BEGIN PGP SIGNATURE-----"
PGP_SIGNATURE_FOOTER = "-----END PGP SIGNATURE-----"


def render_string(content, params):
    if not params:
        params = {}
    return Template(content, searchList=[params]).respond()


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise
    return


def read_possibly_signed(path):
    content = ""
    with open(path, "r") as fp:
        content = fp.read()

    if content.startswith(PGP_SIGNED_MESSAGE_HEADER):
        # http://rfc-ref.org/RFC-TEXTS/2440/chapter7.html
        subprocess.check_output(["gpg", "--batch", "--verify", path],
                                stderr=subprocess.STDOUT)
        ret = {'body': '', 'signature': '', 'garbage': ''}
        signature = ""
        lines = content.splitlines()
        i = 0
        for i in range(0, len(lines)):
            if lines[i] == PGP_SIGNED_MESSAGE_HEADER:
                mode = "header"
                continue
            elif mode == "header":
                if lines[i] != "":
                    mode = "body"
                continue
            elif lines[i] == PGP_SIGNATURE_HEADER:
                mode = "signature"
                continue
            elif lines[i] == PGP_SIGNATURE_FOOTER:
                mode = "garbage"
                continue

            # dash-escaped content in body
            if lines[i].startswith("- ") and mode == "body":
                ret[mode] += lines[i][2:] + "\n"
            else:
                ret[mode] += lines[i] + "\n"

        return(ret['body'], ret['signature'])
    else:
        return(content, None)


def signfile(path):
    tmpfile = "%s.tmp" % path
    os.rename(path, tmpfile)
    subprocess.check_output(["gpg", "--batch", "--output", path,
                             "--clearsign", tmpfile])
    os.unlink(tmpfile)


def dumps(content):
    if CONTENT_EXT == ".yaml":
        return yaml.safe_dump(content)
    else:
        return json.dumps(content)


def load_content(path):
    (content, signature) = read_possibly_signed(path)
    if CONTENT_EXT == ".yaml":
        return yaml.safe_load(content)
    else:
        return json.loads(content)


def create_file(path):
    sys.stderr.write("%s\n" % path)
    sys.stderr.write(" %s\n" % os.path.dirname(path))
    mkdir_p(os.path.dirname(path))
    size = 1024
    if path.endswith("-disk1.img"):
        size = 1024 * 1024 * 10 + 100
    elif path.endswith("-root.tar.gz"):
        size = 1024 * 1024 * 10 + 200
    elif path.endswith(".tar.gz"):
        size = 1024 * 1024 * 10 + 300
    with open(path, "w") as fp:
        fp.truncate(size)

    return({'name': path, 'md5sum': KNOWN_HASHES[size]})
        


def main():
    parser = argparse.ArgumentParser(description="create example content tree")

    parser.add_argument("out_d", metavar='out_d',
                        help=('create content under output_dir'))

    parser.add_argument('--sign', action='store_true', default=False,
                        help='sign all generated files')

    args = parser.parse_args()

    stream_file_fmt = os.sep.join(
        [args.out_d, "$stream/${release['name']}/${arch}"]) + CONTENT_EXT

    templ = STREAM_TEMPLATE.lstrip()
    tmpl_utils = {'create_file': create_file}

    streams = {}
    for stream in DATA_IN["streams"]:
        for release in DATA_IN["releases"]:
            for arch in DATA_IN["arches"]:
                serials = []
                data = {
                    "release": release,
                    "stream": stream,
                    "arch": arch,
                    "serials": DATA_IN["serials"],
                    "flabels": DATA_IN["flabels"],
                    "utils": tmpl_utils,
                    }

                stream_path = render_string(stream_file_fmt, data)
                outd = os.path.dirname(stream_path)
                mkdir_p(outd)
                data['outd'] = outd
                sys.stderr.write("%s\n" % stream_path)

                content = render_string(templ, params=data)
                with open(stream_path, "w") as fp:
                    if CONTENT_EXT == ".yaml":
                        fp.write(content)
                    else:
                        fp.write(dumps(yaml.safe_load(content)))

                if args.sign:
                    signfile(stream_path)

                content = load_content(stream_path)

                url = stream_path[len(args.out_d) + 1:]
                curstream = {'url': url}
                curstream.update(content.get('tags', {}))

                streams[url] = curstream

    collections = {}
    for (url, stream) in streams.iteritems():
        ctok = ""

        for ptok in [""] + url.split("/")[:-1]:
            ctok += "%s/" % ptok
            if ctok not in collections:
                collections[ctok] = {'description': "Ubuntu Image Streams",
                       'format': 'stream-collection:1.0',
                       'streams': [],
                       'tags': {}}

                collections[ctok]['tags'] = copy.copy(stream)
                del collections[ctok]['tags']['url']

            else:
                clear = []
                for key, val in collections[ctok]['tags'].iteritems():
                    if key not in stream or stream[key] != val:
                        clear.append(key)
                for key in clear:
                    del collections[ctok]['tags'][key]

            collections[ctok]['streams'].append(stream)

    for coll in collections:
        coll_file = "%s/%s/streams%s" % (args.out_d, coll, CONTENT_EXT)
        streams = []
        for stream in collections[coll]['streams']:
            cstream = copy.copy(stream)
            cstream['url'] = cstream['url'][len(coll) - 1:]
            streams.append(cstream)

        collections[coll]['streams'] = streams
        sys.stderr.write("%s\n" % coll)
        with open(coll_file, "w") as fp:
            fp.write(dumps(collections[coll]))

        if args.sign:
            signfile(coll_file)

    return

if __name__ == '__main__':
    sys.exit(main())

# vi: ts=4 expandtab
